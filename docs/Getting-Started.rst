
###############
Getting Started
###############

This page has information about getting started with the toolbox
including `installation <#installation>`__ and `running the
examples <#running-the-examples>`__.

Installation
============

To use the toolbox, download or clone the GitHub repository. You will
also need a modern version of MATLAB, we recommend updating to at least
2018a. You may also need some of the Matlab support packages. This
version of the toolbox is released as a package, ``+ott``, which
contains a collection of functions for calculating T-matrices, beam
coefficients, force and torques. To use the functions in your code, the
easiest way is to add the directory containing the package to your path
and importing the package,

.. code:: matlab

    addpath('<download-path>/ott');
    help ott   % Test that ott was found, should display ott Contents page

if you regularly use the toolbox you might want to add the command to
your
`startup.m <https://au.mathworks.com/help/matlab/ref/startup.html?searchHighlight=startup.m>`__
file. If you have multiple version of ``ott`` installed, you might want
to check which version is currently being found, you can use the
following command

.. code:: matlab

    what ott

Changes and overview
====================

The toolbox has changed a lot since previous releases. To get started,
it is probably easiest to take a look at the examples, run and modify
them.

The examples calculate the force and torque efficiencies. These are the
force and torque per photon, in photon units. To convert to SI units:
force\_SI = force\_Q \* n \* P/c torque\_SI = torque\_Q \* P/w where n
is the refractive index of the surrounding medium, P is the beam power
in watts, c is the speed of light in free space, w is the angular
optical frequency, in radians/s.

To understand how the toolbox calculates optical forces and torques,
take a look at the guide to version 1.2 of the toolbox and the optical
tweezers computational toolbox paper (pre-print). Both are available on
our
`website <https://people.smp.uq.edu.au/TimoNieminen/software.html>`__.

T-matrices are represented by ``Tmatrix`` objects. For simple shapes,
the ``Tmatrix.simple`` method can be used to construct T-matrices for a
variety of common objects. More complex T-matrices can be generated by
inheriting the T-matrix class, for an example, take a look at TmatrixMie
and TmatrixPm.

Beams are represented by a ``Bsc`` objects. A beam can be multiplied by
T-matrices or other matrix/scalar values to generate new beams. For
Gaussian type beams, including Hermite-Gauss, Ince-Gauss, and
Laguarre-Gaussian beams, the ``BscPmGauss`` class provides the
equivalent of ``bsc_pointmatch_farfield`` in the previous release.

The new implementation hides ``Nmax``, most routines have a default
choice of ``Nmax`` based on the beam/particle size. ``Nmax`` can still
be accessed and changed manually, but in most cases the automatic choice
of ``Nmax`` should be fine. Beams can T-matrices can be multiplied
without needing to worry about the having equal ``Nmax``, the
beam/T-matrix will be expanded to match the maximum ``Nmax``. If
repeated calculations are being done, it may be faster to first ensure
the ``Nmax`` of the beam and T-matrix match, this is done in
``forcetorque`` when the position or rotation arguments are used.

Running the examples
====================

To get started using the toolbox we provide a list of examples. You can
add the examples to the path using

.. code:: matlab

    addpath('<download-path>/ott/examples');

if you downloaded the latest version from github, the ``ott`` example
will probably be ``ott-master``, use this instead in this section.

And get a list of the examples with

.. code:: matlab

    help ott/examples

This provides a list of the examples. To view a specific example run

.. code:: matlab

    open ott/example_sphere

The following section walks through the contents of this example.

Calculating forces on a spherical particle
------------------------------------------
